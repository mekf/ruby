"" 		- double quote, everything that goes in here is interpreted as a string
#		- hash, marking a start of a comment
$0		- name of the script
false	- false value

lines = []	- define an array name "lines"
#{}		- string interpolation, interpret the variable that goes inside {} as string

%s 		- formatter, as string
%de 	- formatter, as decimal
% []	- an array whose values can be fetched to the formatters

Escape Sequences
\ 		- single backslash
\a 		- bell/alert
\b 		- backspace
\r 		- carriage return
\n 		- newline
\s 		- space
\t 		- tab

<<BLOCK	- a block of strings, everything that goes in here will be interpreted as such
BLOCK

puts	- print a string, automatically add a new line
print	- print a stirng, doesn't add a new line
sample()	- goes through whatever this method is called upon, takes values randomly
			- it will takes up to the number given (eg: sample(5))
gets		- gets the user input
chomp		- strip the trailling new line
open 		- open something, e.g: a file or an URL
read		- read the content of a document, the result can be assinged to a variable
seek		- scan through the content of a document
	
require		- run a library
include		- run a library, its method will be append to the current module

"open-uri"	- a library that can be used to deal with web documents

ARGV		- arguments
*arg 		- a set of arguments

STDIN		- Standard input
File 		- a Library that deal with files

'w'			- argument that can be fed to File.open
			- this will open the file with writable permission. work from the start of file

def name	- defining a function with name is "name"
end
